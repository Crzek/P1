Django Framework (marco o entorno de trabajo) de codigo abierto
Para que sirve?
Crear sitios Web conplejos

MVC ---Modelo Vista Controlador----->laravel, symfony..
Django utiliza MTV  ----model template view, pero el modelo sigue siendo el mismo.


dividir en 3 grandes modelos
-Vista / Template (con el que el usuario interactua, el usuraio ve)
son Cadenas de texto (HTML casi siempre)

-Controlador / view (comunicacion vista-modelo)

-modelo (gestionar datos---BBDD)

BBDD
soportado 
SQlite3 (por defecto)
PostgreSQL (recomendado)
MySQL (configurar, los demas)
Oracle

Conectores
sap SQl
sql server

Carpetas
manage ---> interecturar con el proy Django

init --->paquetes
settings ---->configuraciones de django
urls ----> guarda las url del proy, es como un Indice o table de contenido.
wsgi ----> relativo al servidor web WSGI, que vamos a utilizar.
asgi --> relativo al servidor web ASGI, que vamos a utilizar.


install
pip install Django

initialitation, esto creara un carpeta con el proy y subcarpetas, donde se encontrara los archivos de Django
django-admin startproject <nameProy>

ver lo que puede hacer el archivo manage.py, diregete a su dir.
manege.py help
python manage.py help

crear BBDD.
python manage.py migrate

Arrancar servidor ---> no para proyecto serio. ya no aguanta consultas simultaneas.
python manage.py runserver

Modulo django.Http
from django.http import HttpResponse

request --- solicitar peticion
HttpResponse --- envia respuesta (peticion)
debemos crear un archcivo en el proy de django: para craer una view
views.py ----en este .py se creara funciones que cada 1 sera 1 View
e.g
from django.http import HttpResponse
def saludo(request):
  return HttpResponse("buenass esto es una paguina con Django")

urls.py ----> se debera importar las funciones de views.py para utilizar.

Template
Crear objeto 
plt = Template(doc_externo.read())

Crear Contexto, si Cargamos la template de Forma manual, si creamos un Templete a traves de Loader no hayq ue crear un Context()
ctx = Context() ----> contenido dinamico (variables, funciones...)
ctx = Context({
  "varible_html":varible_python,
  "elemnto":obj.python,
  "temas":[]
  }
)

Renderizado de obj Templete
"Renderizar" en Django es la acción de convertir un template en una respuesta HTTP, es decir, la acción de generar el HTML final a partir de un archivo de plantilla y contexto específico.
doc = plt.render(ctx)

Cargadores o Loader
se ha de especificar una ruta donde se guardaran todas las plantillas.
debemos esoecificar la ruta en DIRS
settings.py
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["C:/Users/ERICK/Documents/Desarrollo/python/Django/P1/Proy1/Proy1/plantillas"],

Craer template con Loader
1.
from django.template import Loader
plt = Loader.get_template("<nombreplantilla.html>")
doc =plt.render({Diccionario}) ---> para las variables

2.
from django.template.Loader import get_template
plt = get_template("<platilla.html>")
doc = plt.render({dic})

3. la forma mas rapida, utilizando shortcuts, de esta forma crear una Vista (VIEW) muy rapida ya que utiliza HttpResponse
form django.shortcuts import render
def View_1(request):
  doc = render(request,"<plantilla.html>", <Diccionario=Context>)
  return doc

Plantilla HTML

Orden de llamadas Django, en la nomenclatura del punto
1. Diccionario
2. atributos
3. metodos
4. indice de lista

para acceder a una varible de python: con {{}}
<p> esta es la varible o funcion,{{varible_html}}  </p>

si fuera un class y quieres entrar a sun atributo o funcion:
{{Miclass.atributo}}
{{Miclass.metodo}}      ----> Parentesis no se ponen {{class.metodo()}}
{{lista.0}}      ----->>l[0]

Bucle: con {}
{% for <var> in list %}     -----> apretura
  {{<var>}}
{% endfor %} -----> cierre

Condicional
{% if %}  ----abrir

{% if %}
{% elif %}
{% else %}

{% endif %} ----cierre

comentarios
{# Esto es un comentario de 1 linea #}
      
{% comment %}
comentario de varias lineas
{% endcomment %}

Filtros: barra vertical  |
{{class|upper}}
{{class|fisrt|lower}}


Plantilla incrustadas
Son varias Plantillas que fusionan para forma un paguina
si quieres incluir una platilla, e.g barra.html
vamos a la Plantilla principal ---> mitemplate.html
siguiendo la estructura de HTML, vamos donde la pondriamos
{% include "<name_plantilla.html>" %}

Herencia de Plantilla
Para escribir menos codigo, y partir de una html, donde lo unico que vamos a cambiar es el contenido cambiante.
---!!!escribir en la 1r linia de la plantilla HIJA
{% extends "<padre.html>" %}


