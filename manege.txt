Comnados manege.py

Poner un marcha un servidor web
python manage.py runserver 

crear crear un App
python manage.py startapp <ameAPP>

ver si hay algun error
python manage.py check <nombre app>
-----
1.Hecer migraciones ---unas ves creadas las tablas creamos la bbdd
python manage.py makemigrations

2.Cree las tablas en sql Dajango
python manage.py sqlmigrate <nombre APP> <numero migracion que da antes en cmd>

3. craer contenido de la tablas en bbdd
python manage.py migrate



Manipular Datos desde consola 
python manage.py shell

--------
Desde la consola>>> hacemos como una importacion
from <nombre appp>.models import <tabla>

añadir, es como llama a la Class, cara variable es un objeto 
2 pasos
art = <tabla>(nombre="Erick",seccion="persona",percio=90)
art.save()

1 paso
art = <tabla>.objects.create(nombre="Erick",seccion="persona", precio=20)

Manipular BBDD, como si modificaras un objeto
art.precio=95
art.save()

Delete o eliminar, sabiendo que clave unica tiene el producto SQL(primary key)
art = <table>.objects.get(id=<numero>)   #pero en esta variable serimos teniendo el objeto eliminado, se puede volcer a recuperar.
art.delete()

Visualizar una Query
l = <table>.objects.all()
l.query.__str__()

------

PostgreSQL
configuraciones:
1.descargar de forma normacon .exe --> ejecutas
2. crear un Base de datos nueva ---> 1. modo visual
    2.2 por Comnados
    Create database <nombre BBDD>

debemos tener instalada la libreria --- psycopg2 ---
pip install psycopg2

Modificar settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '<nombre BBDD postgres',
        "USER": 'postgres',
        "PASSWORD": 'suprem',
        "HOST": '127.0.0.1',
        'DATABASE_PROT':'5432',
}

hacer consulta tipo:
select * from "<table>";
where "<puntoTable> = <algo>"

<table>.objects.filter(<puntoTable> = "<algo>")

Menor que <cont>__lte=
mayor que <cont>__gte=
.filter(seccion="home", precio__lte=100)
.filter(precio__range(10,100))

order by por precio menor a mayor
.filter(seccion"home").order_by("precio")
mayor a menor
.filter(seccion"home").order_by("precio")


Panel de usuario
Crear un supreUsuario y seguir los pasos 
python manage.py createsuperuser


#Tener disponible en Panel administrado el Articulo si se crean otra clase modelos han de ponerse
admin.site.register(Articulos)

Modificar campos de la web ----> cuando quierra rellenar le salga
models.py

class <tabla>(models.Model):
    direccion=models.CharField(max_lengtj=50, Verbose_name="La direccion")

Crear columnas con su campo y cuadro de busqueda (foto)
1. Ir al archivo admin.py
2.crear una clase que herede de admin.modelAdmin
class <tabla admin>(admin.modelAdmin):
    #para ver columnas
    list_display = ("nombre","email")   #Escribir exactamente que models.py

    # para buscar por Nombre y telefono
    search_field = ("nombre","telefono")

3. registrar la clase <table admin>
    admin.site.register(<tabla>, <tabla Admin>)

----
https://youtu.be/DVOAjMuM4vM?t=674
filtar por seccion en un nav aparte a la derecha
list_filter = ("seccion",)  # !!! importante la como(,) #filtro vertical
date_hierarchy = ("fecha")      #filtro horizontal
----
Cambiar idioma
1. ir a settings.py
2. LENGUAGE_CODE = "en-us"     #usa 
2. LENGUAGE_CODE = "es-eu"     #español

---
Agregar Usuarios----MAnejar usuarios y grupos
Staf ----> permites a un usuario entar en panel de administrado
Active ----> tiene que estar suscrito o registrado

Grupos, serven para añadir 50 personas y estas tengas las mismas funcionalidades.

----
https://youtu.be/B840ou6pcjg?t=68
Formularios MAnuales (envio de datos al servidor)
HttpRequest 


